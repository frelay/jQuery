// $('.logo'); // Получение элемента по классу
// $('#recive'); // Получение элемента по идентификатору
// $('menu'); // Получение элемента по тегу
// $('nav menu'); // Получение элемента по тегу, который внутри другого тега
// $('.icons > div'); // Получение элемента по классу/тегу/id, который внутри, но только дочерний, а не все div внутри .icons
// $('.icons img + h4'); // Получение элемента по классу/тегу/id, который внутри, но только соседний
// $('img[heigth = 150]'); // Получение элемента по атрибуту
// $('img[src ^= img/]'); // Получение элемента по атрибуту у которого начинается с img/
// $('img[src $= .png]'); // Получение элемента по атрибуту у которого заканчивается на .png 
// $('a[href *= #]'); // Получение элемента по атрибуту у которого в любом месте есть #

// Чтобы подключить jquery и js файл в head используем конструкцию, которая ждёт пока html и css прогрузятся
// $(document).ready(function(){
//    // Тут пишем весь код
//    let tagP = $('.mainText p').text(); // Записываем содержимое тега p класса maintext в переменную
//    alert(tagP);
// });

// Или укороченая версия

$(function(){
   // Тут пишем весь код
   let tagP = $('.mainText p').text('Новый текст для тега р'); // Записываем содержимое тега p класса maintext в переменную
   // В параметр метода text можно вписать новый текст для тега
   $('.mainText p').hide(3000); // метод hide заставляет исчезнуть элемент, в параметр метода подается время через которое исчезнет
   $('.mainText p').show(3000); // метод show заставляет появиться элемент, в параметр метода подается время через которое появиться   

   // Можно еще так сделать
   let tagP2 = $('.mainText p');   

   function hideShow(tag) {
      tag.hide(3000).show(3000); // цепной вызов функций
   }
   
   hideShow(tagP2);   

   let btnWidth = $('.btn').width(); // Получаем ширину элемента
   let btnHeight = $('.btn').height(); // Получаем высоту элемента

   console.log('btnWidth = ' + btnWidth);
   console.log('btnHeight = ' + btnHeight);

   $('.icons > div').hide(3000) // Применяет методы так же и к массиву элементов без циклов

   let iconsWidth = $('.icons > div').width(400); // Меняем значения ширины элемента
   let iconsHeight = $('.icons > div').height(200); // Меняем значения высоты элемента

   $('.icons > div').hide(3000).show(3000);

   function widthHeight(element) {
      const className = '.' + element;
      const width = $(className).width();
      const height = $(className).height ();
      $(className).text(`Ширина: ${width}; Длинна: ${height}`);
   }

   widthHeight('btn');

   //$('.mainText').html('<p>Изменение тегов HTML</p>'); // Изменение HTML в элементе

   $('#recive > h2').fadeOut(3000).fadeIn(3000); // Тоже исчезновение и появление, только не двигается, а как бы испаряется
   $('#recive > h2').fadeTo(4000, 0.5); // Исчезновение до какого то параметра прозрачности
   $('#recive > h2').slideUp(2000).slideDown(1000); // Сворачивает и разворачивает элемемнт

   let srcAttr = $('.logo img').attr('src'); // Получение атрибута элемента
   console.log(srcAttr);
   srcAttr = $('.logo img').attr('src', 'img/icon1.png'); // Меняем атрибут у элемента
   console.log(srcAttr);

   $('nav menu').addClass('border'); // Добавляем класс элементу, так же можно и удалить класс методом removeClass
   $('nav menu').css('background', 'green'); // Добавление CSS свойства элементу 
   
   $('menu > li > a').animate({
      'font-size' : '30px',      
      'padding' : '20px'
   }, 3000);  // Добавление анимации через изменение CSS свойств элемента в течение времени, работаето только на числовые свойства

   // Добавление HTML элементов до и перед указанным элементом и в конце и в начале
   $('#recive > h2').before('<div>Новый блок до</div>');
   $('#recive > h2').after('<div>Новый блок после</div>');
   $('#recive > h2').append('<div>Новый блок в конце</div>');
   $('#recive > h2').prepend('<div>Новый блок в начале</div>');

   // Применение методов jquery для каждого элемента в выборке
   $('.icons img').each(function () { 
       if ($(this).attr('src') == 'img/icon3.png') { // this это типа каждый элемент выборки
         $(this).fadeOut(1000);       
       }
   });

   // Получение количества элементов

   let divAmount = $('div').length;
   console.log('divAmount = ' + divAmount);

   // Клонирование элементов

   let clonemainText =  $('.mainText').clone();
   $('body').append(clonemainText);

   // События мыши

   $('.logo').mouseover(function () {
      alert('Навели мышку');      
   });

   $('.logo').mouseout(function () {
      alert('Убрали мышку');      
   });

   $('body > header > div > a').click(function () {
      alert('Кликнули');      
   });

   $('body > header > div > a').mouseup(function () {
      alert('Нажал и держал');      
   });

   // События формы

   /*
   submit - при нажатии на кнопку срабатывает событие
   focus - навели мышкой на инпут
   blur - наоборот убрали мышку
   change - событие, которое будет происходить при изменении инпута, например при написании символа каждый раз что то происходит
   reset - событие при нажатии кнопки с типом reset (очищение формы)  
   */

   // События клавиатуры
   /*
   keypress - отслеживает нажатие какой - л. кнопки на клаве
   keyup - срабатывает когда кнопка нажата и отпускается
   keydown - срабатывает когда кнопка нажата, но не отпущена
   */

});
